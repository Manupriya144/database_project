CREATE TABLE marks (
    marks_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id VARCHAR(10) NOT NULL,
    course_id VARCHAR(10) NOT NULL,
    quiz1_marks DECIMAL(5,2) CHECK (quiz1_marks BETWEEN 0 AND 100),
    quiz2_marks DECIMAL(5,2) CHECK (quiz2_marks BETWEEN 0 AND 100),
    quiz3_marks DECIMAL(5,2) CHECK (quiz3_marks BETWEEN 0 AND 100),
    assessment_marks DECIMAL(5,2) CHECK (assessment_marks BETWEEN 0 AND 100),
    mid_marks DECIMAL(5,2) CHECK (mid_marks BETWEEN 0 AND 100),
    final_theory DECIMAL(5,2) CHECK (final_theory BETWEEN 0 AND 100),
    final_practical DECIMAL(5,2) CHECK (final_practical BETWEEN 0 AND 100),
    ca_marks DECIMAL(5,2),                                                       -- new: calculated from best 2 quizzes + assessment + mid
    final_marks DECIMAL(5,2),                                                     -- total marks including CA + final exams
    ca_eligible ENUM('Eligible','Not Eligible','MC','WH') DEFAULT 'Not Eligible',
    final_eligible ENUM('Eligible','Not Eligible','MC','WH','E*') DEFAULT 'Not Eligible',
    grade CHAR(10),
    FOREIGN KEY (student_id) REFERENCES student(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (course_id) REFERENCES course(course_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

INSERT INTO marks (marks_id, student_id, course_id, quiz1_marks, quiz2_marks, quiz3_marks, assessment_marks, mid_marks, final_theory, final_practical, ca_marks, final_marks, ca_eligible, final_eligible, grade)
VALUES
(1,'U013','ICT1222',52,46,49,46,41,37,26,NULL,NULL,'Eligible','Eligible',NULL),
(2,'U013','ICT1233',60,59,73,59,65,26,33,NULL,NULL,'Eligible','Eligible',NULL),
(3,'U013','ICT1242',69,85,79,62,56,62,0,NULL,NULL,'Eligible','Eligible',NULL),
(4,'U013','ICT1253',50,60,55,82,76,28,39,NULL,NULL,'Eligible','Eligible',NULL),
(5,'U013','TCS1212',64,81,53,83,46,76,0,NULL,NULL,'Eligible','Eligible',NULL),
(6,'U013','TMS1233',62,56,60,71,66,93,0,NULL,NULL,'Eligible','Eligible',NULL),
(7,'U014','ICT1222',57,46,53,48,61,27,44,NULL,NULL,'Eligible','Eligible',NULL),
(8,'U014','ICT1233',76,55,54,46,57,33,48,NULL,NULL,'Eligible','Eligible',NULL),
(9,'U014','ICT1242',79,82,46,59,61,67,0,NULL,NULL,'Eligible','Eligible',NULL),
(10,'U014','ICT1253',45,48,60,47,74,38,41,NULL,NULL,'Eligible','Eligible',NULL),
(11,'U014','TCS1212',47,74,65,48,64,95,0,NULL,NULL,'Eligible','Eligible',NULL),
(12,'U014','TMS1233',83,63,71,74,78,70,0,NULL,NULL,'Eligible','Eligible',NULL),
(13,'U015','ICT1222',69,69,49,82,72,50,44,NULL,NULL,'Eligible','Eligible',NULL),
(14,'U015','ICT1233',80,80,70,56,71,43,35,NULL,NULL,'Eligible','Eligible',NULL),
(15,'U015','ICT1242',71,84,53,59,51,75,0,NULL,NULL,'Eligible','Eligible',NULL),
(16,'U015','ICT1253',54,45,57,60,40,30,41,NULL,NULL,'Eligible','Eligible',NULL),
(17,'U015','TCS1212',80,83,44,45,75,99,0,NULL,NULL,'Eligible','Eligible',NULL),
(18,'U015','TMS1233',63,58,46,49,68,100,0,NULL,NULL,'Eligible','Eligible',NULL),
(19,'U016','ICT1222',51,49,65,69,67,31,34,NULL,NULL,'Eligible','Eligible',NULL),
(20,'U016','ICT1233',79,52,74,66,63,44,29,NULL,NULL,'Eligible','Eligible',NULL),
(21,'U016','ICT1242',49,81,51,61,58,81,0,NULL,NULL,'Eligible','Eligible',NULL),
(22,'U016','ICT1253',59,50,40,70,59,27,26,NULL,NULL,'Eligible','Eligible',NULL),
(23,'U016','TCS1212',76,54,46,82,44,61,0,NULL,NULL,'Eligible','Eligible',NULL),
(24,'U016','TMS1233',64,83,70,63,71,86,0,NULL,NULL,'Eligible','Eligible',NULL),
(25,'U017','ICT1222',57,72,64,72,52,35,38,NULL,NULL,'Eligible','Eligible',NULL),
(26,'U017','ICT1233',83,60,80,70,68,47,42,NULL,NULL,'Eligible','Eligible',NULL),
(27,'U017','ICT1242',80,84,47,53,46,77,0,NULL,NULL,'Eligible','Eligible',NULL),
(28,'U017','ICT1253',72,49,48,52,77,27,39,NULL,NULL,'Eligible','Eligible',NULL),
(29,'U017','TCS1212',59,48,65,71,56,90,0,NULL,NULL,'Eligible','Eligible',NULL),
(30,'U017','TMS1233',61,63,85,58,45,78,0,NULL,NULL,'Eligible','Eligible',NULL),
(31,'U018','ICT1222',63,67,75,69,46,45,40,NULL,NULL,'Eligible','Eligible',NULL),
(32,'U018','ICT1233',51,70,74,72,45,40,33,NULL,NULL,'Eligible','Eligible',NULL),
(33,'U018','ICT1242',65,61,85,45,75,63,0,NULL,NULL,'Eligible','Eligible',NULL),
(34,'U018','ICT1253',58,84,41,78,46,43,48,NULL,NULL,'Eligible','Eligible',NULL),
(35,'U018','TCS1212',83,61,47,69,40,77,0,NULL,NULL,'Eligible','Eligible',NULL),
(36,'U018','TMS1233',65,66,63,80,67,79,0,NULL,NULL,'Eligible','Eligible',NULL),
(37,'U019','ICT1222',48,83,77,73,68,49,43,NULL,NULL,'Eligible','Eligible',NULL),
(38,'U019','ICT1233',62,53,63,52,43,32,46,NULL,NULL,'Eligible','Eligible',NULL),
(39,'U019','ICT1242',74,77,53,77,45,71,0,NULL,NULL,'Eligible','Eligible',NULL),
(40,'U019','ICT1253',69,49,80,76,67,32,38,NULL,NULL,'Eligible','Eligible',NULL),
(41,'U019','TCS1212',80,69,80,48,41,79,0,NULL,NULL,'Eligible','Eligible',NULL),
(42,'U019','TMS1233',53,83,46,66,48,93,0,NULL,NULL,'Eligible','Eligible',NULL),
(43,'U020','ICT1222',84,48,75,66,41,32,32,NULL,NULL,'Eligible','Eligible',NULL),
(44,'U020','ICT1233',70,78,41,52,60,26,37,NULL,NULL,'Eligible','Eligible',NULL),
(45,'U020','ICT1242',76,49,79,62,80,72,0,NULL,NULL,'Eligible','Eligible',NULL),
(46,'U020','ICT1253',85,73,73,70,80,47,35,NULL,NULL,'Eligible','Eligible',NULL),
(47,'U020','TCS1212',82,72,77,66,40,78,0,NULL,NULL,'Eligible','Eligible',NULL),
(48,'U020','TMS1233',51,85,55,75,46,64,0,NULL,NULL,'Eligible','Eligible',NULL),
(49,'U021','ICT1222',51,62,53,50,41,38,38,NULL,NULL,'Eligible','Eligible',NULL),
(50,'U021','ICT1233',68,73,75,48,73,40,25,NULL,NULL,'Eligible','Eligible',NULL),
(51,'U021','ICT1242',61,46,76,82,64,82,0,NULL,NULL,'Eligible','Eligible',NULL),
(52,'U021','ICT1253',59,68,80,85,41,31,27,NULL,NULL,'Eligible','Eligible',NULL),
(53,'U021','TCS1212',47,48,64,58,44,70,0,NULL,NULL,'Eligible','Eligible',NULL),
(54,'U021','TMS1233',61,61,80,67,49,74,0,NULL,NULL,'Eligible','Eligible',NULL),
(55,'U022','ICT1222',77,56,79,81,61,35,43,NULL,NULL,'Eligible','Eligible',NULL),
(56,'U022','ICT1233',84,51,64,50,58,34,40,NULL,NULL,'Eligible','Eligible',NULL),
(57,'U022','ICT1242',56,57,82,69,61,76,0,NULL,NULL,'Eligible','Eligible',NULL),
(58,'U022','ICT1253',56,53,66,50,67,30,29,NULL,NULL,'Eligible','Eligible',NULL),
(59,'U022','TCS1212',47,53,69,51,54,76,0,NULL,NULL,'Eligible','Eligible',NULL),
(60,'U022','TMS1233',45,72,51,75,70,91,0,NULL,NULL,'Eligible','Eligible',NULL),
(61,'U023','ICT1222',85,73,62,50,50,44,44,NULL,NULL,'Eligible','Eligible',NULL),
(62,'U023','ICT1233',80,81,85,75,63,46,30,NULL,NULL,'Eligible','Eligible',NULL),
(63,'U023','ICT1242',52,48,54,78,65,72,0,NULL,NULL,'Eligible','Eligible',NULL),
(64,'U023','ICT1253',69,61,43,57,77,32,46,NULL,NULL,'Eligible','Eligible',NULL),
(65,'U023','TCS1212',79,76,85,80,62,69,0,NULL,NULL,'Eligible','Eligible',NULL),
(66,'U023','TMS1233',69,81,63,63,80,77,0,NULL,NULL,'Eligible','Eligible',NULL),
(67,'U024','ICT1222',63,51,82,59,78,38,50,NULL,NULL,'Eligible','Eligible',NULL),
(68,'U024','ICT1233',59,68,82,64,73,38,31,NULL,NULL,'Eligible','Eligible',NULL),
(69,'U024','ICT1242',64,51,66,81,78,70,0,NULL,NULL,'Eligible','Eligible',NULL),
(70,'U024','ICT1253',49,68,45,76,51,43,25,NULL,NULL,'Eligible','Eligible',NULL),
(71,'U024','TCS1212',65,76,64,63,58,99,0,NULL,NULL,'Eligible','Eligible',NULL),
(72,'U024','TMS1233',61,49,41,47,65,84,0,NULL,NULL,'Eligible','Eligible',NULL),
(73,'U025','ICT1222',84,71,53,71,54,41,40,NULL,NULL,'Eligible','Eligible',NULL),
(74,'U025','ICT1233',49,55,82,72,70,27,44,NULL,NULL,'Eligible','Eligible',NULL),
(75,'U025','ICT1242',82,67,78,49,42,84,0,NULL,NULL,'Eligible','Eligible',NULL),
(76,'U025','ICT1253',76,66,55,70,54,48,35,NULL,NULL,'Eligible','Eligible',NULL),
(77,'U025','TCS1212',68,62,48,73,76,74,0,NULL,NULL,'Eligible','Eligible',NULL),
(78,'U025','TMS1233',63,73,47,56,50,71,0,NULL,NULL,'Eligible','Eligible',NULL),
(79,'U026','ICT1222',55,52,80,67,63,38,43,NULL,NULL,'Eligible','Eligible',NULL),
(80,'U026','ICT1233',69,81,77,46,79,25,47,NULL,NULL,'Eligible','Eligible',NULL),
(81,'U026','ICT1242',54,58,62,61,56,72,0,NULL,NULL,'Eligible','Eligible',NULL),
(82,'U026','ICT1253',52,77,66,72,73,48,44,NULL,NULL,'Eligible','Eligible',NULL),
(83,'U026','TCS1212',79,79,74,55,78,85,0,NULL,NULL,'Eligible','Eligible',NULL),
(84,'U026','TMS1233',74,45,54,61,78,74,0,NULL,NULL,'Eligible','Eligible',NULL),
(85,'U027','ICT1222',58,67,49,51,40,38,50,NULL,NULL,'Eligible','Eligible',NULL),
(86,'U027','ICT1233',63,65,49,46,77,32,41,NULL,NULL,'Eligible','Eligible',NULL),
(87,'U027','ICT1242',45,79,66,57,40,81,0,NULL,NULL,'Eligible','Eligible',NULL),
(88,'U027','ICT1253',66,68,73,80,68,45,46,NULL,NULL,'Eligible','Eligible',NULL),
(89,'U027','TCS1212',71,53,85,50,58,98,0,NULL,NULL,'Eligible','Eligible',NULL),
(90,'U027','TMS1233',65,81,58,70,67,86,0,NULL,NULL,'Eligible','Eligible',NULL);


CREATE TABLE student (
    user_id VARCHAR(10) PRIMARY KEY,
    reg_no VARCHAR(15) UNIQUE NOT NULL,
    batch VARCHAR(10),
    department_id VARCHAR(10),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (department_id) REFERENCES department(department_id)
        ON DELETE SET NULL
        ON UPDATE CASCADE
);



INSERT INTO student (user_id, reg_no, batch, department_id) VALUES
('U013','TG/2023/1701','2023','D001'),
('U014','TG/2023/1702','2023','D001'),
('U015','TG/2023/1703','2023','D001'),
('U016','TG/2023/1704','2023','D001'),
('U017','TG/2023/1705','2023','D001'),
('U018','TG/2023/1706','2023','D001'),
('U019','TG/2023/1707','2023','D001'),
('U020','TG/2023/1708','2023','D001'),
('U021','TG/2023/1709','2023','D001'),
('U022','TG/2023/1710','2023','D001'),
('U023','TG/2023/1711','2023','D001'),
('U024','TG/2023/1712','2023','D001'),
('U025','TG/2023/1713','2023','D001'),
('U026','TG/2023/1714','2023','D001'),
('U027','TG/2023/1715','2023','D001');

CREATE TABLE course (
    course_id VARCHAR(10) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    credit INT NOT NULL,
    academic_year INT CHECK (academic_year BETWEEN 1 AND 4),
    semester ENUM('1', '2') NOT NULL,
    total_hours DECIMAL(5,2) DEFAULT 50.00,
    weekly_hours DECIMAL(4,2) DEFAULT 3.00
);


INSERT INTO course (course_id, name, credit, academic_year, semester, total_hours, weekly_hours) VALUES

('ICT1222','Database Management Systems',3,1,'1',90.00,6.00),
('ICT1233','Server Side Web Development',3,1,'1',90.00,6.00),
('ICT1242','Computer Architecture',3,1,'1',45.00,3.00),
('ICT1253','Computer Networks',3,1,'1',90.00,6.00),
('TCS1212','Fundamentals of Management',2,1,'1',30.00,2.00),
('TMS1233','Discrete Mathematics',3,1,'1',45.00,3.00);


-----1.view----

CREATE OR REPLACE VIEW student_marks_summary AS
SELECT 
    m.student_id,
    s.reg_no,
    m.course_id,
    c.name AS course_name,
    m.ca_marks,
    m.final_marks,
    m.ca_eligible,
    m.final_eligible,
    m.grade
FROM marks m
JOIN student s ON s.user_id = m.student_id
JOIN course c ON c.course_id = m.course_id;

SQL query

-- View overall marks summary for all students
SELECT * FROM student_marks_summary;

-- View marks for one student
SELECT * FROM student_marks_summary WHERE reg_no = 'TG/2023/1704';

-- Find top marks in a specific course
SELECT course_id, MAX(final_marks) AS highest_mark FROM student_marks_summary GROUP BY course_id;


===========================================================================================

CREATE TABLE student (
    user_id VARCHAR(10) PRIMARY KEY,
    reg_no VARCHAR(15) UNIQUE NOT NULL,
    batch VARCHAR(10),
    department_id VARCHAR(10),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (department_id) REFERENCES department(department_id)
        ON DELETE SET NULL
        ON UPDATE CASCADE
);


CREATE TABLE result (
    result_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id VARCHAR(10) NOT NULL,
    academic_year INT CHECK (academic_year BETWEEN 1 AND 4),
    semester ENUM('1','2') NOT NULL,
    sgpa DECIMAL(3,2) ,
    cgpa DECIMAL(3,2) ,
    total_credits INT DEFAULT 0,
    FOREIGN KEY (student_id) REFERENCES student(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


INSERT INTO result (student_id, academic_year, semester, sgpa, cgpa, total_credits) VALUES

('U013',1,'2',NULL,NULL,0),
('U014',1,'2',NULL,NULL,0),
('U015',1,'2',NULL,NULL,0),
('U016',1,'2',NULL,NULL,0),
('U017',1,'2',NULL,NULL,0),
('U018',1,'2',NULL,NULL,0),
('U019',1,'2',NULL,NULL,0),
('U020',1,'2',NULL,NULL,0),
('U021',1,'2',NULL,NULL,0),
('U022',1,'2',NULL,NULL,0),
('U023',1,'2',NULL,NULL,0),
('U024',1,'2',NULL,NULL,0),
('U025',1,'2',NULL,NULL,0),
('U026',1,'2',NULL,NULL,0),
('U027',1,'2',NULL,NULL,0);



---2.view-----

-- Sem Pass or fail check
CREATE OR REPLACE VIEW semester_pass_fail AS
SELECT
    s.reg_no,
    r.academic_year,
    r.semester,
    CASE
        WHEN EXISTS (
            SELECT 1
            FROM marks m
            JOIN course c ON c.course_id = m.course_id
            WHERE m.student_id = r.student_id
              AND c.academic_year = r.academic_year
              AND c.semester = r.semester
              AND m.grade = 'MC'
        ) THEN 'WH'
        WHEN r.sgpa >= 2 THEN 'Pass'
        ELSE 'Fail'
    END AS semester_result
FROM result r
JOIN student s ON s.user_id = r.student_id;

SQL query

-- Show all students’ semester status
SELECT * FROM semester_pass_fail;

-- Check a student’s semester results
SELECT * FROM semester_pass_fail WHERE reg_no = 'TG/2023/1704';

-- Count how many students passed each semester
SELECT academic_year, semester, COUNT(*) AS passed_students
FROM semester_pass_fail
WHERE semester_result = 'Pass'
GROUP BY academic_year, semester;



===========================================================================================


---3. view ----

-- Class Check according to the current sem
CREATE OR REPLACE VIEW student_class AS
SELECT
    s.reg_no,
    r.academic_year,
    r.semester,
    CASE
        WHEN EXISTS (
            SELECT 1
            FROM marks m
            JOIN course c ON c.course_id = m.course_id
            WHERE m.student_id = r.student_id
              AND c.academic_year = r.academic_year
              AND c.semester = r.semester
              AND m.grade = 'MC'
        ) THEN 'WH'
        ELSE CAST(r.cgpa AS CHAR)
    END AS cgpa,
    CASE
        WHEN EXISTS (
            SELECT 1
            FROM marks m
            JOIN course c ON c.course_id = m.course_id
            WHERE m.student_id = r.student_id
              AND c.academic_year = r.academic_year
              AND c.semester = r.semester
              AND m.grade = 'MC'
        ) THEN 'WH'
        WHEN r.cgpa >= 3.7 THEN 'First Class'
        WHEN r.cgpa >= 3.3 THEN 'Second Class (Upper)'
        WHEN r.cgpa >= 3.0 THEN 'Second Class (Lower)'
        WHEN r.cgpa >= 2.0 THEN 'Pass'
        ELSE 'Fail'
    END AS class_status
FROM result r
JOIN student s ON s.user_id = r.student_id
WHERE (r.academic_year, r.semester) = (
    SELECT r2.academic_year, r2.semester
    FROM result r2
    WHERE r2.student_id = r.student_id
    ORDER BY r2.academic_year DESC, r2.semester DESC
    LIMIT 1
);


SQL query

-- Show class standing for all students
SELECT * FROM student_class;

-- Show one student’s final class
SELECT * FROM student_class WHERE reg_no = 'TG/2023/1704';

-- Count students by class category
SELECT class_status, COUNT(*) AS no_of_students
FROM student_class
GROUP BY class_status;








