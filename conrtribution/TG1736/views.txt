CREATE TABLE marks (
    marks_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id VARCHAR(10) NOT NULL,
    course_id VARCHAR(10) NOT NULL,
    quiz1_marks DECIMAL(5,2) CHECK (quiz1_marks BETWEEN 0 AND 100),
    quiz2_marks DECIMAL(5,2) CHECK (quiz2_marks BETWEEN 0 AND 100),
    quiz3_marks DECIMAL(5,2) CHECK (quiz3_marks BETWEEN 0 AND 100),
    assessment_marks DECIMAL(5,2) CHECK (assessment_marks BETWEEN 0 AND 100),
    mid_marks DECIMAL(5,2) CHECK (mid_marks BETWEEN 0 AND 100),
    final_theory DECIMAL(5,2) CHECK (final_theory BETWEEN 0 AND 100),
    final_practical DECIMAL(5,2) CHECK (final_practical BETWEEN 0 AND 100),
    ca_marks DECIMAL(5,2),                                                       -- new: calculated from best 2 quizzes + assessment + mid
    final_marks DECIMAL(5,2),                                                     -- total marks including CA + final exams
    ca_eligible ENUM('Eligible','Not Eligible','MC','WH') DEFAULT 'Not Eligible',
    final_eligible ENUM('Eligible','Not Eligible','MC','WH','E*') DEFAULT 'Not Eligible',
    grade CHAR(10),
    FOREIGN KEY (student_id) REFERENCES student(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (course_id) REFERENCES course(course_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

INSERT INTO marks (marks_id, student_id, course_id, quiz1_marks, quiz2_marks, quiz3_marks, assessment_marks, mid_marks, final_theory, final_practical, ca_marks, final_marks, ca_eligible, final_eligible, grade) VALUES
(1,'U013','ICT1222',80,72,82,84,66,72,72,78,74,'Eligible','Eligible',NULL),
(2,'U013','ICT1233',82,75,84,74,72,74,82,78,77,'Eligible','Eligible',NULL),
(3,'U013','ICT1242',85,76,69,73,71,76,70,72,71,'Eligible','Eligible',NULL),
(4,'U013','ICT1253',80,79,63,80,70,89,71,78,75,'Eligible','Eligible',NULL),
(5,'U013','TCS1212',76,75,73,66,78,0,0,71,70,'Eligible','Eligible',NULL),
(6,'U013','TMS1233',72,69,60,73,77,89,0,74,72,'Eligible','Eligible',NULL),
(7,'U014','ICT1222',83,83,83,78,69,64,71,80,75,'Eligible','Eligible',NULL),
(8,'U014','ICT1233',75,72,72,83,67,75,82,74,78,'Eligible','Eligible',NULL),
(9,'U014','ICT1242',85,75,68,80,80,83,0,74,70,'Eligible','Eligible',NULL),
(10,'U014','ICT1253',80,79,65,76,65,64,82,73,76,'Eligible','Eligible',NULL),
(11,'U014','TCS1212',80,70,77,85,61,0,0,72,71,'Eligible','Eligible',NULL),
(12,'U014','TMS1233',81,66,62,66,60,73,0,70,68,'Eligible','Eligible',NULL),
(13,'U015','ICT1222',69,85,67,67,64,60,71,70,69,'Eligible','Eligible',NULL),
(14,'U015','ICT1233',81,79,71,66,79,80,84,75,74,'Eligible','Eligible',NULL),
(15,'U015','ICT1242',80,80,60,65,77,77,0,72,70,'Eligible','Eligible',NULL),
(16,'U015','ICT1253',78,65,60,81,68,77,74,71,73,'Eligible','Eligible',NULL),
(17,'U015','TCS1212',65,81,82,78,65,0,0,68,70,'Eligible','Eligible',NULL),
(18,'U015','TMS1233',68,68,76,69,67,66,0,70,69,'Eligible','Eligible',NULL),
(19,'U016','ICT1222',84,81,68,76,68,85,77,78,76,'Eligible','Eligible',NULL),
(20,'U016','ICT1233',67,76,72,79,78,67,72,71,70,'Eligible','Eligible',NULL),
(21,'U016','ICT1242',74,67,80,85,61,62,0,70,68,'Eligible','Eligible',NULL),
(22,'U016','ICT1253',77,77,72,82,75,61,85,74,73,'Eligible','Eligible',NULL),
(23,'U016','TCS1212',65,70,62,80,73,0,0,69,68,'Eligible','Eligible',NULL),
(24,'U016','TMS1233',85,75,78,68,76,89,0,75,74,'Eligible','Eligible',NULL),
(25,'U017','ICT1222',66,72,66,83,75,68,66,70,71,'Eligible','Eligible',NULL),
(26,'U017','ICT1233',67,73,77,83,61,65,75,72,73,'Eligible','Eligible',NULL),
(27,'U017','ICT1242',65,71,78,69,72,89,0,71,72,'Eligible','Eligible',NULL),
(28,'U017','ICT1253',67,74,65,83,67,78,77,73,74,'Eligible','Eligible',NULL),
(29,'U017','TCS1212',82,75,72,69,62,0,0,70,70,'Eligible','Eligible',NULL),
(30,'U017','TMS1233',81,76,61,68,73,67,0,71,70,'Eligible','Eligible',NULL),
(31,'U018','ICT1222',67,75,79,84,79,72,75,73,74,'Eligible','Eligible',NULL),
(32,'U018','ICT1233',65,85,68,79,75,67,76,72,73,'Eligible','Eligible',NULL),
(33,'U018','ICT1242',82,77,73,70,78,81,0,74,75,'Eligible','Eligible',NULL),
(34,'U018','ICT1253',77,67,84,84,69,85,72,75,76,'Eligible','Eligible',NULL),
(35,'U018','TCS1212',67,67,68,69,72,0,0,70,71,'Eligible','Eligible',NULL),
(36,'U018','TMS1233',85,69,83,77,70,71,0,76,75,'Eligible','Eligible',NULL),
(37,'U019','ICT1222',68,67,60,74,74,71,73,70,71,'Eligible','Eligible',NULL),
(38,'U019','ICT1233',68,69,62,70,73,74,82,73,74,'Eligible','Eligible',NULL),
(39,'U019','ICT1242',82,81,73,68,60,62,0,72,70,'Eligible','Eligible',NULL),
(40,'U019','ICT1253',76,82,62,84,79,85,75,77,76,'Eligible','Eligible',NULL),
(41,'U019','TCS1212',77,65,69,78,72,0,0,71,70,'Eligible','Eligible',NULL),
(42,'U019','TMS1233',67,82,67,83,76,65,0,72,71,'Eligible','Eligible',NULL),
(43,'U020','ICT1222',77,70,64,73,69,68,80,75,74,'Eligible','Eligible',NULL),
(44,'U020','ICT1233',69,67,65,78,68,73,74,71,72,'Eligible','Eligible',NULL),
(45,'U020','ICT1242',80,67,71,73,67,83,0,74,75,'Eligible','Eligible',NULL),
(46,'U020','ICT1253',85,80,79,84,66,74,68,76,77,'Eligible','Eligible',NULL),
(47,'U020','TCS1212',69,74,60,77,70,0,0,72,71,'Eligible','Eligible',NULL),
(48,'U020','TMS1233',84,77,85,75,74,70,0,75,74,'Eligible','Eligible',NULL),
(49,'U021','ICT1222',78,85,79,69,69,70,84,77,76,'Eligible','Eligible',NULL),
(50,'U021','ICT1233',71,80,70,70,72,90,75,74,75,'Eligible','Eligible',NULL),
(51,'U021','ICT1242',74,85,75,83,67,70,0,73,72,'Eligible','Eligible',NULL),
(52,'U021','ICT1253',77,73,85,77,71,63,83,76,75,'Eligible','Eligible',NULL),
(53,'U021','TCS1212',71,83,77,70,77,0,0,74,73,'Eligible','Eligible',NULL),
(54,'U021','TMS1233',65,79,82,71,74,85,0,72,73,'Eligible','Eligible',NULL),
(55,'U022','ICT1222',74,67,85,78,75,64,85,76,75,'Eligible','Eligible',NULL),
(56,'U022','ICT1233',74,72,68,69,73,85,77,75,74,'Eligible','Eligible',NULL),
(57,'U022','ICT1242',67,79,79,80,78,72,0,74,73,'Eligible','Eligible',NULL),
(58,'U022','ICT1253',82,81,82,78,77,61,76,75,74,'Eligible','Eligible',NULL),
(59,'U022','TCS1212',82,84,80,67,63,0,0,72,71,'Eligible','Eligible',NULL),
(60,'U022','TMS1233',72,76,65,85,79,61,0,74,73,'Eligible','Eligible',NULL),
(61,'U023','ICT1222',57,55,53,48,40,48,53,50,49,'Eligible','Eligible',NULL),
(62,'U023','ICT1233',52,52,54,56,52,59,63,55,54,'Eligible','Eligible',NULL),
(63,'U023','ICT1242',49,56,40,60,43,54,0,50,48,'Eligible','Eligible',NULL),
(64,'U023','ICT1253',58,47,43,49,51,54,55,52,51,'Eligible','Eligible',NULL),
(65,'U023','TCS1212',59,51,56,60,51,0,0,49,48,'Eligible','Eligible',NULL),
(66,'U023','TMS1233',60,48,54,59,50,47,0,50,49,'Eligible','Eligible',NULL),
(67,'U024','ICT1222',54,46,43,45,50,65,48,52,51,'Eligible','Eligible',NULL),
(68,'U024','ICT1233',50,52,56,50,45,55,62,55,54,'Eligible','Eligible',NULL),
(69,'U024','ICT1242',58,59,47,57,45,50,0,52,51,'Eligible','Eligible',NULL),
(70,'U024','ICT1253',58,57,40,51,54,63,58,55,56,'Eligible','Eligible',NULL),
(71,'U024','TCS1212',57,45,46,51,48,0,0,50,49,'Eligible','Eligible',NULL),
(72,'U024','TMS1233',47,48,57,50,51,55,0,52,51,'Eligible','Eligible',NULL),
(73,'U025','ICT1222',51,59,43,53,55,61,65,57,56,'Eligible','Eligible',NULL),
(74,'U025','ICT1233',55,57,59,57,43,56,56,54,55,'Eligible','Eligible',NULL),
(75,'U025','ICT1242',59,50,49,47,44,55,0,52,51,'Eligible','Eligible',NULL),
(76,'U025','ICT1253',48,52,49,48,45,56,49,50,51,'Eligible','Eligible',NULL),
(77,'U025','TCS1212',57,58,59,49,52,0,0,51,50,'Eligible','Eligible',NULL),
(78,'U025','TMS1233',58,50,55,50,45,60,0,53,52,'Eligible','Eligible',NULL),
(79,'U026','ICT1222',54,49,45,55,54,64,46,50,49,'Eligible','Eligible',NULL),
(80,'U026','ICT1233',56,45,55,49,46,57,62,52,51,'Eligible','Eligible',NULL),
(81,'U026','ICT1242',60,58,55,58,54,60,0,55,54,'Eligible','Eligible',NULL),
(82,'U026','ICT1253',50,47,58,45,47,54,46,50,49,'Eligible','Eligible',NULL),
(83,'U026','TCS1212',53,52,57,54,45,0,0,49,48,'Eligible','Eligible',NULL),
(84,'U026','TMS1233',59,60,57,48,43,53,0,51,50,'Eligible','Eligible',NULL),
(85,'U027','ICT1222',70,75,68,72,70,73,76,72,75,'Eligible','Eligible',NULL),
(86,'U027','ICT1233',72,70,74,71,73,75,74,71,74,'Eligible','Eligible',NULL),
(87,'U027','ICT1242',75,74,70,73,71,72,0,73,71,'Eligible','Eligible',NULL),
(88,'U027','ICT1253',71,76,72,70,74,78,75,70,76,'Eligible','Eligible',NULL),
(89,'U027','TCS1212',70,68,74,72,75,0,0,73,70,'Eligible','Eligible',NULL),
(90,'U027','TMS1233',74,70,71,73,72,75,0,73,72,'Eligible','Eligible',NULL);


CREATE TABLE student (
    user_id VARCHAR(10) PRIMARY KEY,
    reg_no VARCHAR(15) UNIQUE NOT NULL,
    batch VARCHAR(10),
    status ENUM('Proper', 'Repeat', 'Suspended') DEFAULT 'Proper',
    department_id VARCHAR(10),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (department_id) REFERENCES department(department_id)
        ON DELETE SET NULL
        ON UPDATE CASCADE
);


INSERT INTO student (user_id, reg_no, batch, status, department_id) VALUES

('U013','TG/2023/1701','2023','Proper','D001'),
('U014','TG/2023/1702','2023','Proper','D001'),
('U015','TG/2023/1703','2023','Proper','D001'),
('U016','TG/2023/1704','2023','Proper','D001'),
('U017','TG/2023/1705','2023','Proper','D001'),
('U018','TG/2023/1706','2023','Proper','D001'),
('U019','TG/2023/1707','2023','Proper','D001'),
('U020','TG/2023/1708','2023','Proper','D001'),
('U021','TG/2023/1709','2023','Proper','D001'),
('U022','TG/2023/1710','2023','Proper','D001'),
('U023','TG/2023/1711','2023','Repeat','D001'),
('U024','TG/2023/1712','2023','Repeat','D001'),
('U025','TG/2023/1713','2023','Repeat','D001'),
('U026','TG/2023/1714','2023','Repeat','D001'),
('U027','TG/2023/1715','2023','Suspended','D001');


CREATE TABLE department_course (
    department_id VARCHAR(10),
    course_id VARCHAR(10),
    PRIMARY KEY (department_id, course_id),
    FOREIGN KEY (department_id) REFERENCES department(department_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (course_id) REFERENCES course(course_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


INSERT INTO course (course_id, name, credit, academic_year, semester, total_hours, weekly_hours) VALUES

('ICT1222','Database Management Systems',3,1,'1',45.00,3.00),
('ICT1233','Server Side Web Development',3,1,'1',45.00,3.00),
('ICT1242','Computer Architecture',3,1,'1',45.00,3.00),
('ICT1253','Computer Networks',3,1,'1',45.00,3.00),
('TCS1212','Fundamentals of Management',2,1,'1',30.00,2.00),
('TMS1233','Discrete Mathematics',3,1,'1',45.00,3.00);


CREATE OR REPLACE VIEW student_marks_summary AS
SELECT 
    m.student_id,
    s.reg_no,
    m.course_id,
    c.name AS course_name,
    m.ca_marks,
    m.final_marks,
    m.ca_eligible,
    m.final_eligible,
    m.grade
FROM marks m
JOIN student s ON s.user_id = m.student_id
JOIN course c ON c.course_id = m.course_id;

SQL query

SELECT * FROM student_marks_summary WHERE grade = 'A';

1. Select all student marks with grades

SELECT * 
FROM student_marks_summary
ORDER BY student_id, course_id;

2.Summary of total CA marks and final marks per student

SELECT 
    student_id,
    reg_no,
    SUM(COALESCE(ca_marks, 0)) AS total_ca_marks,
    SUM(COALESCE(final_marks, 0)) AS total_final_marks
FROM student_marks_summary
GROUP BY student_id, reg_no
ORDER BY student_id;

3.Count of students per grade in a course

SELECT 
    course_id,
    course_name,
    grade,
    COUNT(student_id) AS num_students
FROM student_marks_summary
GROUP BY course_id, course_name, grade
ORDER BY course_id, grade DESC;

4. Get a student's marks summary
SELECT * FROM student_marks_summary WHERE reg_no = 'ICT003';

===========================================================================================

INSERT INTO student (user_id, reg_no, batch, status, department_id) VALUES

('U013','TG/2023/1701','2023','Proper','D001'),
('U014','TG/2023/1702','2023','Proper','D001'),
('U015','TG/2023/1703','2023','Proper','D001'),
('U016','TG/2023/1704','2023','Proper','D001'),
('U017','TG/2023/1705','2023','Proper','D001'),
('U018','TG/2023/1706','2023','Proper','D001'),
('U019','TG/2023/1707','2023','Proper','D001'),
('U020','TG/2023/1708','2023','Proper','D001'),
('U021','TG/2023/1709','2023','Proper','D001'),
('U022','TG/2023/1710','2023','Proper','D001'),
('U023','TG/2023/1711','2023','Repeat','D001'),
('U024','TG/2023/1712','2023','Repeat','D001'),
('U025','TG/2023/1713','2023','Repeat','D001'),
('U026','TG/2023/1714','2023','Repeat','D001'),
('U027','TG/2023/1715','2023','Suspended','D001');

--Result Table (SGPA & CGPA)
CREATE TABLE result (
    result_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id VARCHAR(10) NOT NULL,
    academic_year INT CHECK (academic_year BETWEEN 1 AND 4),
    semester ENUM('1','2') NOT NULL,
    sgpa DECIMAL(3,2) ,
    cgpa DECIMAL(3,2) ,
    total_credits INT DEFAULT 0,
    FOREIGN KEY (student_id) REFERENCES student(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

INSERT INTO result (student_id, academic_year, semester, sgpa, cgpa, total_credits) VALUES

('U013',1,'2',NULL,NULL,0),
('U014',1,'2',NULL,NULL,0),
('U015',1,'2',NULL,NULL,0),
('U016',1,'2',NULL,NULL,0),
('U017',1,'2',NULL,NULL,0),
('U018',1,'2',NULL,NULL,0),
('U019',1,'2',NULL,NULL,0),
('U020',1,'2',NULL,NULL,0),
('U021',1,'2',NULL,NULL,0),
('U022',1,'2',NULL,NULL,0),
('U023',1,'2',NULL,NULL,0),
('U024',1,'2',NULL,NULL,0),
('U025',1,'2',NULL,NULL,0),
('U026',1,'2',NULL,NULL,0),
('U027',1,'2',NULL,NULL,0);



-- Sem Pass or fail check
CREATE OR REPLACE VIEW semester_pass_fail AS
SELECT
    s.reg_no,
    r.academic_year,
    r.semester,
    r.sgpa,
    CASE
        WHEN r.sgpa >= 2 THEN 'Pass'
        ELSE 'Fail'
    END AS semester_result
FROM result r
JOIN student s ON s.user_id = r.student_id;


SQL query

1.Get all students who failed the semester
SELECT * FROM semester_pass_fail WHERE semester_result = 'Fail';

2.View all students with their semester results

SELECT *
FROM semester_pass_fail
ORDER BY academic_year, semester, reg_no;

3.List students who failed the semester

SELECT *
FROM semester_pass_fail
WHERE semester_result = 'Fail'
ORDER BY academic_year, semester;

4.Count of pass/fail by batch

SELECT s.batch, r.semester_result, COUNT(*) AS count_students
FROM semester_pass_fail r
JOIN student s ON s.user_id = r.student_id
GROUP BY s.batch, r.semester_result
ORDER BY s.batch;

5.Average SGPA per semester

SELECT academic_year, semester, ROUND(AVG(sgpa),2) AS avg_sgpa
FROM semester_pass_fail
GROUP BY academic_year, semester;



===========================================================================================



-- Class Check according to the current sem
CREATE OR REPLACE VIEW student_class AS
SELECT
    s.reg_no,
    r.academic_year,
    r.semester,
    r.cgpa,
    CASE
        WHEN r.cgpa >= 3.7 THEN 'First Class'
        WHEN r.cgpa >= 3.3 THEN 'Second Class (Upper)'
        WHEN r.cgpa >= 3.0 THEN 'Second Class (Lower)'
        WHEN r.cgpa >= 2.0 THEN 'Pass'
        ELSE 'Fail'
    END AS class_status
FROM result r
JOIN student s ON s.user_id = r.student_id
WHERE (r.academic_year, r.semester) = (
    SELECT r2.academic_year, r2.semester
    FROM result r2
    WHERE r2.student_id = r.student_id
    ORDER BY r2.academic_year DESC, r2.semester DESC
    LIMIT 1
);



SQL query

1.View all students with their class status

SELECT *
FROM student_class
ORDER BY cgpa DESC;

2.List students with First Class

SELECT reg_no, academic_year, semester, cgpa, class_status
FROM student_class
WHERE class_status = 'First Class'
ORDER BY cgpa DESC;

3.List students with Pass/Fail

SELECT reg_no, academic_year, semester, cgpa, class_status
FROM student_class
WHERE class_status IN ('Pass','Fail')
ORDER BY cgpa ASC;






