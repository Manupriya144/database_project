-- 1. Create Database
CREATE DATABASE db_project;
USE db_project;

-- 2. Users Table (Parent table for all types of users)
CREATE TABLE users (
    user_id VARCHAR(10) PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(100) NOT NULL,
    department VARCHAR(30) NOT NULL,
    role ENUM('Admin', 'Dean', 'Lecturer', 'Tech_Officer', 'Student') NOT NULL
);

-- 3. Department Table
CREATE TABLE department (
    dept_id INT AUTO_INCREMENT PRIMARY KEY,
    dept_name VARCHAR(50) UNIQUE NOT NULL
);

-- 4. Student Table
CREATE TABLE student (
    user_id VARCHAR(10) PRIMARY KEY,
    reg_no VARCHAR(15) UNIQUE NOT NULL,
    batch VARCHAR(10),
    status ENUM('Proper', 'Repeat', 'Suspended') DEFAULT 'Proper'
    FOREIGN KEY (user_id) REFERENCES users(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- 5. Tech Officer Table
CREATE TABLE tech_officer (
    user_id VARCHAR(10) PRIMARY KEY,
    office_name VARCHAR(50),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- 6. Lecturer Table
CREATE TABLE lecture (
    user_id VARCHAR(10) PRIMARY KEY,
    specialization VARCHAR(50),
    designation VARCHAR(50),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- 7. Dean Table
CREATE TABLE dean (
    lecture_id VARCHAR(10) PRIMARY KEY,
    term_start DATE NOT NULL,
    term_end DATE,
    FOREIGN KEY (lecture_id) REFERENCES lecture(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- 8. Course Table
CREATE TABLE course (
    course_id VARCHAR(10) PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    credit INT NOT NULL,
    semester INT CHECK (semester BETWEEN 1 AND 8),
    total_hours DECIMAL(5,2) DEFAULT 50.00,  -- total planned hours
    weekly_hours DECIMAL(4,2) DEFAULT 3.00   -- hours per week
);

-- 9. Marks Table
CREATE TABLE marks (
    marks_id INT AUTO_INCREMENT PRIMARY KEY,
    quiz1_marks DECIMAL(5,2),
    quiz2_marks DECIMAL(5,2),
    quiz3_marks DECIMAL(5,2),
    assessment_marks DECIMAL(5,2),
    mid_marks DECIMAL(5,2),
    final_theory DECIMAL(5,2),
    final_practical DECIMAL(5,2),
    final_marks DECIMAL(5,2)
);

-- 10. Course-Marks Mapping
CREATE TABLE course_marks (
    course_id VARCHAR(10),
    marks_id INT,
    PRIMARY KEY (course_id, marks_id),
    FOREIGN KEY (course_id) REFERENCES course(course_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (marks_id) REFERENCES marks(marks_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- 11. Student-Marks Mapping
CREATE TABLE student_marks (
    user_id VARCHAR(10),
    marks_id INT,
    grade CHAR(2),
    PRIMARY KEY (user_id, marks_id),
    FOREIGN KEY (user_id) REFERENCES student(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (marks_id) REFERENCES marks(marks_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- 12. Session Table (each lecture/practical session)
CREATE TABLE session (
    session_id INT AUTO_INCREMENT PRIMARY KEY,
    course_id VARCHAR(10) NOT NULL,
    session_date DATE NOT NULL,
    session_hours DECIMAL(4,2) DEFAULT 3.00, -- actual hours for this session
    type ENUM('Theory', 'Practical') DEFAULT 'Theory',
    FOREIGN KEY (course_id) REFERENCES course(course_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- 13. Attendance Table
CREATE TABLE attendance (
    attendance_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id VARCHAR(10) NOT NULL,
    session_id INT NOT NULL,
    status ENUM('Present', 'Absent') NOT NULL,
    medical BOOLEAN DEFAULT FALSE,
    hours_attended DECIMAL(4,2) DEFAULT 0,  -- automatically calculated
    FOREIGN KEY (student_id) REFERENCES student(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (session_id) REFERENCES session(session_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


-- 15. Student-Course Mapping
CREATE TABLE student_course (
    student_id VARCHAR(10),
    course_id VARCHAR(10),
    PRIMARY KEY (student_id, course_id),
    FOREIGN KEY (student_id) REFERENCES student(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (course_id) REFERENCES course(course_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- 16. Lecture-Course Mapping
CREATE TABLE lecture_course (
    lecture_id VARCHAR(10),
    course_id VARCHAR(10),
    PRIMARY KEY (lecture_id, course_id),
    FOREIGN KEY (lecture_id) REFERENCES lecture(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (course_id) REFERENCES course(course_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- 17. Tech Officer Phone Numbers
CREATE TABLE tech_officer_phone_no (
    user_id VARCHAR(10),
    phone_number VARCHAR(15),
    PRIMARY KEY (user_id, phone_number),
    FOREIGN KEY (user_id) REFERENCES tech_officer(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- 18. Result Table
CREATE TABLE result (
    result_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id VARCHAR(10) NOT NULL,
    semester INT CHECK (semester BETWEEN 1 AND 8),
    gpa DECIMAL(3,2),
    sgpa DECIMAL(3,2),
    FOREIGN KEY (student_id) REFERENCES student(user_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

